#!/usr/bin/env bash


set -eu

cd "$(dirname "$0")"

die() { echo "ERROR:" "$@" >&2; exit 1; }

optarr=$(getopt -o 'h' --long 'help,flavor:,use-connection:,no-test,import-enginedb,bucketfs-port:,generic-test-lang:,test-folder:' -- "$@")
eval set -- "$optarr"


while true; do
    case "$1" in
        --flavor) FLAVOR="$2"; shift 2;;
        --use-connection) CONNECTION="$2"; shift 2;;
	--bucketfs-port) BUCKETFS_PORT="$2"; shift 2;;
        --no-test) NOTESTS="yes"; shift;;
        --import-enginedb) IMPORT_ENGINEDB="yes"; shift;;
	--generic-test-lang) generic_test_lang="$2"; shift 2;;
	--test-folder) test_folder="$2"; shift 2;;
        -h|--help) echo "Usage: $0"
       echo "Options:"
       echo "  [--flavor=<name>]                     Choose between different versions of the Dockerfiles (added as _<flavor> suffix)"
       echo "  [--use-connection=<connection-string>]   Run test on Exasol running in existing EXASolo"
       echo "  [--no-test]                           Don't run any tests"
       echo "  [--bucketfs-port]                     port to connect to the bucketfs"
       echo "  [--import-enginedb]                   Do import the standard test data called enginedb (default: no)"
       echo "  [-h|--help]                           Print this help."; exit 0;;
        --) shift; break;;
        *) echo "Internal error while parsing arguments. ($1)"; exit 1;;
    esac
done

[ "X${FLAVOR-}" = "X" ] && die "Missing mandatory argument --flavor"

[ ! -e "$FLAVOR.tar.gz" ] && die "Flavor not exported here: `pwd`/$FLAVOR.tar.gz"

test_config="$(pwd)/flavors/$FLAVOR/testconfig"
[ ! -f "$test_config" ] && die "Testconfig of $flavor not found here: $test_config"

if [ ! -z ${CONNECTION+x} ]; then
    OIFS=$IFS
    IFS=':'
    PARTS=()
    for x in $CONNECTION; do
        PARTS+=($x)
    done
    IFS=$OIFS
    echo "PARTS: ${PARTS[*]}"
    if [ ! ${#PARTS[@]} = "2" ]; then
        echo "argument for --use-connection is not of the form <host>:<port>"
        exit 1
    fi
    CONNECTION_HOST=${PARTS[0]}
    CONNECTION_PORT=${PARTS[1]}
fi


if [ ! -d "./downloads" ]; then
    mkdir -p downloads/{ODBC,JDBC,EXAplus}
    curl https://www.exasol.com/support/secure/attachment/65437/EXASOL_ODBC-6.0.11.tar.gz | tar -C downloads/ODBC --strip-components 1 -zxf -
    curl https://www.exasol.com/support/secure/attachment/60963/EXASOL_JDBC-6.0.8.tar.gz | tar -C downloads/JDBC --strip-components 1 -zxf -
    curl https://www.exasol.com/support/secure/attachment/63966/EXAplus-6.0.10.tar.gz | tar -C downloads/EXAplus --strip-components 1 -zxf -
fi

[ -z "${EXAPLUS-}" ] && export EXAPLUS="$(pwd)/downloads/EXAplus/exaplus"

if [ -z ${VIRTUAL_ENV+x} ]; then
    pip install --user -r "./tests/requirements.txt" 
else
    pip install -r "./tests/requirements.txt" 
fi

typeset -A config
config=( )
while read line; do
    if echo $line | grep -F = &>/dev/null; then
        varname=$(echo "$line" | cut -d '=' -f 1)
        if [[ $varname == "#*" ]]; then continue; fi
        config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
    fi
done < $test_config

for x in "${!config[@]}"; do printf "[%s]=%s\n" "$x" "${config[$x]}" ; done


function cleanup {
    if [ -z ${NOCLEANUP+x} ]; then
	echo "Cleanup: removing exasoldb_${FLAVOR}"
	docker rm -f "exasoldb_${FLAVOR}" || true
	echo "Cleanup: removing config files"
	sudo rm -rf $TEST_TMP_DIR/ || true
    fi
    exit $RETURN_CODE
}

function waitForLine {
    FILE=$1
    PATTERN=$2
    tail -f "$FILE" | while read LOGLINE
    do
        [[ "${LOGLINE}" =~ $PATTERN ]] && pkill -P $$ tail || true
    done
}

RETURN_CODE=0

# import tables for tests
if [ ! -z ${IMPORT_ENGINEDB+x} ]; then
    (cd tests/test/enginedb_small ; ../../../downloads/EXAplus/exaplus \
        -c "$CONNECTION_HOST:$CONNECTION_PORT" \
        -u sys \
        -p exasol \
        -f import.sql)
fi

#fi
TEST_TMP_DIR="/tmp/udftestdb"

# 
# set +x
# echo "wait until start_docker_db and export (and import SQL commands) finished"
# while [ ! -f /tmp/export_finished ]
# do
#   sleep 2
# done

#while [ ! -f /tmp/start_dockerdb_finished ]
#do
#  sleep 2
#done


waitForLine $TEST_TMP_DIR/exa/logs/cored/*bucketfsd* ScriptLanguages
echo "Uploading container for flavor: $FLAVOR"
curl -v -X PUT -T $FLAVOR.tar.gz http://w:write@${CONNECTION_HOST}:${BUCKETFS_PORT}/myudfs/$FLAVOR.tar.gz
echo "Waiting for container to be extracted"
waitForLine $TEST_TMP_DIR/exa/logs/cored/*bucketfsd* $FLAVOR.*extracted
echo "Extracted"



set +e

test_restriction=""

if [ ! -z "${test_folder-}" ]; then
    test_restriction="--test-folder=$test_folder "
fi
if [ ! -z "${generic_test_lang-}" ]; then
    test_restriction="$test_restriction --generic-test-lang=$generic_test_lang"
fi

if [ -z ${NOTESTS+x} ]; then
    echo "Starting tests with connection $CONNECTION_HOST:$CONNECTION_PORT using test_config: $test_config"
    ( cd tests/test ; 
	cmd="./run_locally.sh --server $CONNECTION_HOST:$CONNECTION_PORT --test-config $test_config $test_restriction --";
	$cmd )
fi

RETURN_CODE=$?
exit $RETURN_CODE

# Extract failed tests:
# sed -n '/=\{70\}/,/^FAILED */{p}' setup_ec2.sh.out > setup_ec2.sh.out.failed
