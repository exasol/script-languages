#!/usr/bin/env bash
die() { echo "ERROR:" "$@" >&2; exit 1; }

if [[ "$OSTYPE" == "darwin"* ]]; then
        optarr=$(getopt hf: "$@")
else
	optarr=$(getopt -o 'hf:' --long 'help,flavor:,rm,deploy:,force' -- "$@")
fi

eval set -- "$optarr"

while true; do
    case "$1" in
        -f|--flavor) FLAVOR="$2"; shift 2;;
        --deploy) DEPLOY="$2"; shift 2;;
        --rm) DELETE_EXPORT="yes"; shift 1;;
        --force) FORCE="yes"; shift 1;;
        -h|--help) echo "Usage: $0"
		   echo "Options:"
		   echo "  [--flavor]     Choose between different versions of the Dockerfiles (added as _<flavor> suffix)"
		   echo "  [--rm]         Remove the exported file (tar.gz)"
		   echo "  [--force]      overwrite .tar.gz if it exists"
		   echo "  [--deploy]     Deploy the export into specified bucket (i.e. --deploy=http://w:w@192.168.122.158:2580/myudfs/)"
		   echo "  [-h|--help]    Print this help."; exit 0;;
        --) shift; break;;
        *) echo "Internal error while parsing arguments. ($1)"; exit 1;;
    esac
done


[ "X$FLAVOR" = "X" ] && die "Missing mandatory argument --flavor|-f"
TARGET="$FLAVOR"


if [ -e "$TARGET.tar.gz" ] && [ -z "$FORCE" ]; then
echo "Warning: $TARGET.tar.gz exists"
while true; do
    read -p "Do you want to overwrite $TARGET.tar.gz? (please answer \"yes\" or \"no\"): " yn
    case $yn in
        [Yy]* ) break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
done
fi

REPNAME=$(echo "$FLAVOR" | tr '[:upper:]' '[:lower:]')
docker run --name releasecontainer exaudf/release_$REPNAME

if [[ "$OSTYPE" == "darwin"* ]]; then
        TMPDIR=$(mktemp -d `basename $0`_${FLAVOR}_tmpdir.XXXXXXXX)
else
	TMPDIR=$(mktemp -d --tmpdir=.)
fi

PREP="$TMPDIR/$TARGET"
docker export releasecontainer -o "$PREP.tar"
echo Cleanup Docker
docker stop releasecontainer
docker rm releasecontainer
echo Preparing Container:
echo 1. Unpack
mkdir -p $PREP && rm -rf $PREP/*
tar xf "$PREP.tar" -C "$PREP/" --exclude=dev --exclude=proc
echo 2. Creating Dirs
mkdir $PREP/conf $PREP/proc $PREP/dev $PREP/buckets
echo 3. Creating links
rm $PREP/etc/resolv.conf $PREP/etc/hosts
ln -s /conf/resolv.conf $PREP/etc/resolv.conf
ln -s /conf/hosts $PREP/etc/hosts
echo 4. Package
tar -C $PREP -zcf $PREP.tar.gz $(ls $PREP)
mv $PREP.tar.gz . 
echo 5. Cleanup temp files
rm -rf $PREP.tar $PREP
echo done exporting
if [ ! X"$DEPLOY" = "X" ]; then
echo "Trying to deploy $TARGET.tar.gz using this command:"
echo "curl -v -X PUT -T $TARGET.tar.gz $DEPLOY/$TARGET.tar.gz"
curl -v -X PUT -T $TARGET.tar.gz $DEPLOY/$TARGET.tar.gz
fi
if [ X"$DELETE_EXPORT" = "Xyes" ]; then
    rm $TARGET.tar.gz
fi
echo ----------------------------
if [ X"$DEPLOY" = "X" ]; then
    echo "curl template: (for a bucketfs that is running on port 2580 at 192.168.122.158):"
    echo 
    echo "curl -v -X PUT -T $TARGET.tar.gz http://w:w@192.168.122.158:2580/bucketname/$TARGET.tar.gz"
    echo
fi
echo SQL-template:
echo 
echo "ALTER SESSION SET SCRIPT_LANGUAGES='MYPYTHON=localzmq+protobuf:///bucketfsname/bucketname/$TARGET?lang=python#buckets/bucketfsname/bucketname/$TARGET/exaudf/exaudfclient';"
rm -r $TMPDIR
