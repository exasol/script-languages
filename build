#!/usr/bin/env bash
die() { echo "ERROR:" "$@" >&2; exit 1; }

if [[ "$OSTYPE" == "darwin"* ]]; then
	optarr=$(getopt hf: "$@")
else
	optarr=$(getopt -o 'hf:' --long 'help,flavor:' -- "$@")
fi


eval set -- "$optarr"

while true; do
    case "$1" in
        -f|--flavor) FLAVOR="$2"; shift 2;;
        -h|--help) echo "Usage: $0"
		   echo "Options:"
		   echo "  [--flavor]     Choose between different versions of the Dockerfiles (added as _<flavor> suffix)"
		   echo "  [-h|--help]    Print this help."; exit 0;;
        --) shift; break;;
        *) echo "Internal error while parsing arguments. ($1)"; exit 1;;
    esac
done

[ "X$FLAVOR" = "X" ] && die "Missing mandatory argument --flavor"

TMPDIR=$(mktemp -d `basename $0`_${FLAVOR}_tmpdir.XXXXXXXX)

function cleanup {
    if [ ! -z "$TMPDIR" ]; then
	rm -rf $TMPDIR
    fi
}

if [[ "$OSTYPE" == "darwin"* ]]; then
        CORES=$(sysctl -n hw.ncpu)
else
    	CORES=$(grep processor /proc/cpuinfo | wc -l | tr -d '\n')
fi
REPNAME=$(echo "$FLAVOR" | tr '[:upper:]' '[:lower:]')
echo Using base docker file: Dockerfile.base_$FLAVOR
docker build . --tag exaudf/baseimage_$REPNAME -f flavors/$FLAVOR/Dockerfile.base_$FLAVOR --build-arg numberOfCores=$CORES || die "Could not create exaudf/baseimage"
echo Using build docker file: Dockerfile.build_$FLAVOR
docker build . --tag exaudf/build_$REPNAME -f flavors/$FLAVOR/Dockerfile.build_$FLAVOR || die "Could not create exaudf/build"
trap cleanup EXIT
docker container create --name extract_$REPNAME exaudf/build_$REPNAME
docker container cp extract_$REPNAME:/exaudf $TMPDIR
docker container rm -f extract_$REPNAME
docker build . --no-cache -t exaudf/release_$REPNAME -f flavors/$FLAVOR/Dockerfile.release_$FLAVOR --build-arg extract_dir=$TMPDIR || die "Could not create exaudf/release"
rm -rf $TMPDIR
