#!/bin/bash

# This script acts as the start of exaslct the script language container build tool
# It tries to discover if pipenv is already installed or tries to install it if it not exists.
# After that it creates the virtual environment and install all necessary dependencies for exaslct.
# In the end it runs exaslct_src/exaslct.py in the virtual environment.

COMMAND_LINE_ARGS=$*
SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

run () {
    PIPENV_BIN="$1"
    echo "Using following pipenv executable: $PIPENV_BIN"
    if $PIPENV_BIN --venv &> /dev/null;
    then
        echo "Using existing virtual environment"
    else
        echo "Creating new virtual environment and installing dependencies"
        $PIPENV_BIN install
    fi
    if [ ! -f Pipfile.lock ];
    then
        echo "Installing dependencies"
        $PIPENV_BIN install
    fi
    cd "$SCRIPT_DIR"
    export PYTHONPATH="."
    $PIPENV_BIN run python3 exaslct_src/exaslct.py $COMMAND_LINE_ARGS
}

find_pip_bin () {
    if python3 -m pip list &> /dev/null
    then
        PIP_BIN="python3 -m pip "
    else
        echo "ERROR: cant find pip"
	exit 1
    fi
}

find_and_run_via_pip () {
    find_pip_bin
    local PIPENV_LOCATION=$($PIP_BIN show pipenv | grep 'Location:'  | cut -f 2 -d " ")
    local PIPENV_BIN_IN_LOCATION=$($PIP_BIN show -f pipenv | grep 'bin/pipenv$' | awk '{$1=$1};1')
    PIPENV_BIN=$(command -v "$PIPENV_LOCATION/$PIPENV_BIN_IN_LOCATION")
    if [ -n "$PIPENV_BIN" ];
    then
        run "$PIPENV_BIN"
    else
        echo "ERROR: pipenv seems to be installed, but I can't find in the PATH or via pip"
        exit 1
    fi
}

request_install_to_virtual_env () {
    echo "Do you want to install pipenv into the current virtual environment: yes/no"
    read ANSWER
    if [ "$ANSWER" == "yes" ];
    then
        find_pip_bin
        $PIP_BIN install pipenv
        find_and_run_via_pip
        run "$PIPENV_BIN"
    else
        echo "Aborting"
    fi
}

request_install_to_user () {
    echo "Do you want to install pipenv local to the user: yes/no"
    read ANSWER
    if [ "$ANSWER" == "yes" ];
    then
        find_pip_bin
        $PIP_BIN install --user pipenv
        PIPENV_BIN="$(python3 -m site --user-base)/bin/pipenv"
        run "$PIPENV_BIN"
    else
        echo "Aborting"
    fi
}

request_install_and_run () {
    IS_IN_VIRTUAL_ENV=$(python3 -c "import sys; print(hasattr(sys, 'real_prefix'))")
    if [ "$IS_IN_VIRTUAL_ENV" == "True" ];
    then
        request_install_to_virtual_env
    else
        request_install_to_user
    fi
}


discover_pipenv_and_run() {
    PIPENV_BIN=$(command -v pipenv)
    if [ -n "$PIPENV_BIN" ];
    then
        run "$PIPENV_BIN"
    else
        find_pip_bin
        if $PIP_BIN show pipenv &> /dev/null;
        then
            find_and_run_via_pip
        else
            request_install_and_run
        fi
    fi
}

if [ -n "$PIPENV_BIN" ];
then
    run "$PIPENV_BIN"
else
    discover_pipenv_and_run
fi
