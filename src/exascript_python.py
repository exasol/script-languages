# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _exascript_python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_exascript_python')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_exascript_python')
    _exascript_python = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_exascript_python', [dirname(__file__)])
        except ImportError:
            import _exascript_python
            return _exascript_python
        try:
            _mod = imp.load_module('_exascript_python', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _exascript_python = swig_import_helper()
    del swig_import_helper
else:
    import _exascript_python
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class ConnectionInformationWrapper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _exascript_python.delete_ConnectionInformationWrapper
ConnectionInformationWrapper.copyKind = new_instancemethod(_exascript_python.ConnectionInformationWrapper_copyKind, None, ConnectionInformationWrapper)
ConnectionInformationWrapper.copyAddress = new_instancemethod(_exascript_python.ConnectionInformationWrapper_copyAddress, None, ConnectionInformationWrapper)
ConnectionInformationWrapper.copyUser = new_instancemethod(_exascript_python.ConnectionInformationWrapper_copyUser, None, ConnectionInformationWrapper)
ConnectionInformationWrapper.copyPassword = new_instancemethod(_exascript_python.ConnectionInformationWrapper_copyPassword, None, ConnectionInformationWrapper)
ConnectionInformationWrapper_swigregister = _exascript_python.ConnectionInformationWrapper_swigregister
ConnectionInformationWrapper_swigregister(ConnectionInformationWrapper)

class ImportSpecificationWrapper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, importSpecification_):
        _exascript_python.ImportSpecificationWrapper_swiginit(self, _exascript_python.new_ImportSpecificationWrapper(importSpecification_))
    __swig_destroy__ = _exascript_python.delete_ImportSpecificationWrapper
ImportSpecificationWrapper.isSubselect = new_instancemethod(_exascript_python.ImportSpecificationWrapper_isSubselect, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.numSubselectColumns = new_instancemethod(_exascript_python.ImportSpecificationWrapper_numSubselectColumns, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.copySubselectColumnName = new_instancemethod(_exascript_python.ImportSpecificationWrapper_copySubselectColumnName, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.copySubselectColumnType = new_instancemethod(_exascript_python.ImportSpecificationWrapper_copySubselectColumnType, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.hasConnectionName = new_instancemethod(_exascript_python.ImportSpecificationWrapper_hasConnectionName, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.hasConnectionInformation = new_instancemethod(_exascript_python.ImportSpecificationWrapper_hasConnectionInformation, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.copyConnectionName = new_instancemethod(_exascript_python.ImportSpecificationWrapper_copyConnectionName, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.getConnectionInformation = new_instancemethod(_exascript_python.ImportSpecificationWrapper_getConnectionInformation, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.getNumberOfParameters = new_instancemethod(_exascript_python.ImportSpecificationWrapper_getNumberOfParameters, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.copyKey = new_instancemethod(_exascript_python.ImportSpecificationWrapper_copyKey, None, ImportSpecificationWrapper)
ImportSpecificationWrapper.copyValue = new_instancemethod(_exascript_python.ImportSpecificationWrapper_copyValue, None, ImportSpecificationWrapper)
ImportSpecificationWrapper_swigregister = _exascript_python.ImportSpecificationWrapper_swigregister
ImportSpecificationWrapper_swigregister(ImportSpecificationWrapper)

class ExportSpecificationWrapper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, exportSpecification_):
        _exascript_python.ExportSpecificationWrapper_swiginit(self, _exascript_python.new_ExportSpecificationWrapper(exportSpecification_))
    __swig_destroy__ = _exascript_python.delete_ExportSpecificationWrapper
ExportSpecificationWrapper.hasConnectionName = new_instancemethod(_exascript_python.ExportSpecificationWrapper_hasConnectionName, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.hasConnectionInformation = new_instancemethod(_exascript_python.ExportSpecificationWrapper_hasConnectionInformation, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.copyConnectionName = new_instancemethod(_exascript_python.ExportSpecificationWrapper_copyConnectionName, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.getConnectionInformation = new_instancemethod(_exascript_python.ExportSpecificationWrapper_getConnectionInformation, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.getNumberOfParameters = new_instancemethod(_exascript_python.ExportSpecificationWrapper_getNumberOfParameters, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.copyKey = new_instancemethod(_exascript_python.ExportSpecificationWrapper_copyKey, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.copyValue = new_instancemethod(_exascript_python.ExportSpecificationWrapper_copyValue, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.hasTruncate = new_instancemethod(_exascript_python.ExportSpecificationWrapper_hasTruncate, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.hasReplace = new_instancemethod(_exascript_python.ExportSpecificationWrapper_hasReplace, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.hasCreatedBy = new_instancemethod(_exascript_python.ExportSpecificationWrapper_hasCreatedBy, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.copyCreatedBy = new_instancemethod(_exascript_python.ExportSpecificationWrapper_copyCreatedBy, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.numSourceColumns = new_instancemethod(_exascript_python.ExportSpecificationWrapper_numSourceColumns, None, ExportSpecificationWrapper)
ExportSpecificationWrapper.copySourceColumnName = new_instancemethod(_exascript_python.ExportSpecificationWrapper_copySourceColumnName, None, ExportSpecificationWrapper)
ExportSpecificationWrapper_swigregister = _exascript_python.ExportSpecificationWrapper_swigregister
ExportSpecificationWrapper_swigregister(ExportSpecificationWrapper)

UNSUPPORTED = _exascript_python.UNSUPPORTED
DOUBLE = _exascript_python.DOUBLE
INT32 = _exascript_python.INT32
INT64 = _exascript_python.INT64
NUMERIC = _exascript_python.NUMERIC
TIMESTAMP = _exascript_python.TIMESTAMP
DATE = _exascript_python.DATE
STRING = _exascript_python.STRING
BOOLEAN = _exascript_python.BOOLEAN
EXACTLY_ONCE = _exascript_python.EXACTLY_ONCE
MULTIPLE = _exascript_python.MULTIPLE
class Metadata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _exascript_python.Metadata_swiginit(self, _exascript_python.new_Metadata())
    __swig_destroy__ = _exascript_python.delete_Metadata
Metadata.databaseName = new_instancemethod(_exascript_python.Metadata_databaseName, None, Metadata)
Metadata.databaseVersion = new_instancemethod(_exascript_python.Metadata_databaseVersion, None, Metadata)
Metadata.scriptName = new_instancemethod(_exascript_python.Metadata_scriptName, None, Metadata)
Metadata.scriptSchema = new_instancemethod(_exascript_python.Metadata_scriptSchema, None, Metadata)
Metadata.currentUser = new_instancemethod(_exascript_python.Metadata_currentUser, None, Metadata)
Metadata.scopeUser = new_instancemethod(_exascript_python.Metadata_scopeUser, None, Metadata)
Metadata.currentSchema = new_instancemethod(_exascript_python.Metadata_currentSchema, None, Metadata)
Metadata.scriptCode = new_instancemethod(_exascript_python.Metadata_scriptCode, None, Metadata)
Metadata.moduleContent = new_instancemethod(_exascript_python.Metadata_moduleContent, None, Metadata)
Metadata.connectionInformation = new_instancemethod(_exascript_python.Metadata_connectionInformation, None, Metadata)
Metadata.sessionID = new_instancemethod(_exascript_python.Metadata_sessionID, None, Metadata)
Metadata.sessionID_S = new_instancemethod(_exascript_python.Metadata_sessionID_S, None, Metadata)
Metadata.statementID = new_instancemethod(_exascript_python.Metadata_statementID, None, Metadata)
Metadata.nodeCount = new_instancemethod(_exascript_python.Metadata_nodeCount, None, Metadata)
Metadata.nodeID = new_instancemethod(_exascript_python.Metadata_nodeID, None, Metadata)
Metadata.vmID = new_instancemethod(_exascript_python.Metadata_vmID, None, Metadata)
Metadata.vmID_S = new_instancemethod(_exascript_python.Metadata_vmID_S, None, Metadata)
Metadata.memoryLimit = new_instancemethod(_exascript_python.Metadata_memoryLimit, None, Metadata)
Metadata.inputColumnCount = new_instancemethod(_exascript_python.Metadata_inputColumnCount, None, Metadata)
Metadata.inputColumnName = new_instancemethod(_exascript_python.Metadata_inputColumnName, None, Metadata)
Metadata.inputColumnType = new_instancemethod(_exascript_python.Metadata_inputColumnType, None, Metadata)
Metadata.inputColumnTypeName = new_instancemethod(_exascript_python.Metadata_inputColumnTypeName, None, Metadata)
Metadata.inputColumnSize = new_instancemethod(_exascript_python.Metadata_inputColumnSize, None, Metadata)
Metadata.inputColumnPrecision = new_instancemethod(_exascript_python.Metadata_inputColumnPrecision, None, Metadata)
Metadata.inputColumnScale = new_instancemethod(_exascript_python.Metadata_inputColumnScale, None, Metadata)
Metadata.inputType = new_instancemethod(_exascript_python.Metadata_inputType, None, Metadata)
Metadata.outputColumnCount = new_instancemethod(_exascript_python.Metadata_outputColumnCount, None, Metadata)
Metadata.outputColumnName = new_instancemethod(_exascript_python.Metadata_outputColumnName, None, Metadata)
Metadata.outputColumnType = new_instancemethod(_exascript_python.Metadata_outputColumnType, None, Metadata)
Metadata.outputColumnTypeName = new_instancemethod(_exascript_python.Metadata_outputColumnTypeName, None, Metadata)
Metadata.outputColumnSize = new_instancemethod(_exascript_python.Metadata_outputColumnSize, None, Metadata)
Metadata.outputColumnPrecision = new_instancemethod(_exascript_python.Metadata_outputColumnPrecision, None, Metadata)
Metadata.outputColumnScale = new_instancemethod(_exascript_python.Metadata_outputColumnScale, None, Metadata)
Metadata.outputType = new_instancemethod(_exascript_python.Metadata_outputType, None, Metadata)
Metadata.checkException = new_instancemethod(_exascript_python.Metadata_checkException, None, Metadata)
Metadata.pluginLanguageName = new_instancemethod(_exascript_python.Metadata_pluginLanguageName, None, Metadata)
Metadata_swigregister = _exascript_python.Metadata_swigregister
Metadata_swigregister(Metadata)

class TableIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _exascript_python.TableIterator_swiginit(self, _exascript_python.new_TableIterator())
    __swig_destroy__ = _exascript_python.delete_TableIterator
TableIterator.checkException = new_instancemethod(_exascript_python.TableIterator_checkException, None, TableIterator)
TableIterator.reinitialize = new_instancemethod(_exascript_python.TableIterator_reinitialize, None, TableIterator)
TableIterator.next = new_instancemethod(_exascript_python.TableIterator_next, None, TableIterator)
TableIterator.eot = new_instancemethod(_exascript_python.TableIterator_eot, None, TableIterator)
TableIterator.reset = new_instancemethod(_exascript_python.TableIterator_reset, None, TableIterator)
TableIterator.restBufferSize = new_instancemethod(_exascript_python.TableIterator_restBufferSize, None, TableIterator)
TableIterator.rowsInGroup = new_instancemethod(_exascript_python.TableIterator_rowsInGroup, None, TableIterator)
TableIterator.rowsCompleted = new_instancemethod(_exascript_python.TableIterator_rowsCompleted, None, TableIterator)
TableIterator.getDouble = new_instancemethod(_exascript_python.TableIterator_getDouble, None, TableIterator)
TableIterator.getString = new_instancemethod(_exascript_python.TableIterator_getString, None, TableIterator)
TableIterator.getInt32 = new_instancemethod(_exascript_python.TableIterator_getInt32, None, TableIterator)
TableIterator.getInt64 = new_instancemethod(_exascript_python.TableIterator_getInt64, None, TableIterator)
TableIterator.getNumeric = new_instancemethod(_exascript_python.TableIterator_getNumeric, None, TableIterator)
TableIterator.getDate = new_instancemethod(_exascript_python.TableIterator_getDate, None, TableIterator)
TableIterator.getTimestamp = new_instancemethod(_exascript_python.TableIterator_getTimestamp, None, TableIterator)
TableIterator.getBoolean = new_instancemethod(_exascript_python.TableIterator_getBoolean, None, TableIterator)
TableIterator.wasNull = new_instancemethod(_exascript_python.TableIterator_wasNull, None, TableIterator)
TableIterator_swigregister = _exascript_python.TableIterator_swigregister
TableIterator_swigregister(TableIterator)

class ResultHandler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, it):
        _exascript_python.ResultHandler_swiginit(self, _exascript_python.new_ResultHandler(it))
    __swig_destroy__ = _exascript_python.delete_ResultHandler
ResultHandler.checkException = new_instancemethod(_exascript_python.ResultHandler_checkException, None, ResultHandler)
ResultHandler.reinitialize = new_instancemethod(_exascript_python.ResultHandler_reinitialize, None, ResultHandler)
ResultHandler.next = new_instancemethod(_exascript_python.ResultHandler_next, None, ResultHandler)
ResultHandler.flush = new_instancemethod(_exascript_python.ResultHandler_flush, None, ResultHandler)
ResultHandler.setDouble = new_instancemethod(_exascript_python.ResultHandler_setDouble, None, ResultHandler)
ResultHandler.setString = new_instancemethod(_exascript_python.ResultHandler_setString, None, ResultHandler)
ResultHandler.setInt32 = new_instancemethod(_exascript_python.ResultHandler_setInt32, None, ResultHandler)
ResultHandler.setInt64 = new_instancemethod(_exascript_python.ResultHandler_setInt64, None, ResultHandler)
ResultHandler.setNumeric = new_instancemethod(_exascript_python.ResultHandler_setNumeric, None, ResultHandler)
ResultHandler.setDate = new_instancemethod(_exascript_python.ResultHandler_setDate, None, ResultHandler)
ResultHandler.setTimestamp = new_instancemethod(_exascript_python.ResultHandler_setTimestamp, None, ResultHandler)
ResultHandler.setBoolean = new_instancemethod(_exascript_python.ResultHandler_setBoolean, None, ResultHandler)
ResultHandler.setNull = new_instancemethod(_exascript_python.ResultHandler_setNull, None, ResultHandler)
ResultHandler_swigregister = _exascript_python.ResultHandler_swigregister
ResultHandler_swigregister(ResultHandler)



